import java.util.ArrayList;

import edu.princeton.cs.algs4.Merge;

public class BruteCollinearPoints {
    private LineSegment [] segments;
    private int [][] permutationOfFour;
    public BruteCollinearPoints(Point [] points) {
        Point [] sortedPoints = points;
        Merge.sort(sortedPoints);
        permutationOfFour = new int[][]{
            { 1,2,3,4 },       
            { 2,1,3,4 },       
            { 3,2,1,4 },       
            { 4,2,3,1 },
            { 1,2,4,3 }, 
            { 2,1,4,3 },
            { 3,2,4,1 },
            { 4,2,1,3 },
            { 1,3,2,4 },
            { 2,3,1,4 },
            { 3,1,2,4 },
            { 4,3,2,1 },
            { 1,3,4,2 },
            { 2,3,4,1 },
            { 3,1,4,2 },
            { 4,3,1,2 },
            { 1,4,2,3 },
            { 2,4,1,3 },
            { 3,4,2,1 },
            { 4,1,2,3 },
            { 1,4,3,2 },
            { 2,4,3,1 },
            { 3,4,1,2 },
            { 4,1,3,2 }  
        };
        Merge.sort(points);
        ArrayList<Point> segments = new ArrayList<Point>();
        for (int i = 0; i < permutationOfFour.length; ++i) {
               int p = permutationOfFour[i][0];
               int q = permutationOfFour[i][1];
               int r = permutationOfFour[i][2];
               int s = permutationOfFour[i][3];
               if (sortedPoints[p].slopeTo(sortedPoints[q]) 
                       == sortedPoints[p].slopeTo(sortedPoints[r]) 
                       && (sortedPoints[p].slopeTo(sortedPoints[q])
                               == sortedPoints[p].slopeTo(sortedPoints[s]) {
                   
                   
               }
        }
        
        
        
        
    }
    
    public int numberOfSegments() {
        return segments.length;
    }
}
