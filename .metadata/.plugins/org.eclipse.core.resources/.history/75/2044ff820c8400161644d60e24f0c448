import java.util.ArrayList;
import java.util.Arrays;

import edu.princeton.cs.algs4.Merge;

public class FastCollinearPoints {
    
    private LineSegment [] segments;
    
    public FastCollinearPoints(Point [] points) {
        if (points == null) 
            throw new java.lang.NullPointerException();
        if (checkDuplicates(points)) {
            throw new java.lang.IllegalArgumentException();
        }
        Point[] sortedPoints = Arrays.copyOf(points, points.length);
        ArrayList<LineSegment> segmentsList = new ArrayList<LineSegment>();
        Arrays.sort(sortedPoints);
        Arrays.sort(sortedPoints, sortedPoints[0].slopeOrder());
        int cont = 0;
        for (int i = 0; i < sortedPoints.length - 1; ++i) {
            Point current = sortedPoints[i];
            while (i < sortedPoints.length - 1 && current.compareTo(sortedPoints[i+1]) == 0) {
                ++i;
                ++cont;
            }
            if (cont > 3) {
                Point q = sortedPoints[i-1];
                segmentsList.add(new LineSegment(current, q));
            }
        }
        segments = segmentsList.toArray(new LineSegment[segmentsList.size()]);
    }
    
    public int numberOfSegments() {
        return segments.length;
    }
    
    public LineSegment[] segments() {
        return Arrays.copyOf(segments, numberOfSegments());
    }
    
    private boolean checkDuplicates (Point [] points) {
        for (int i = 0; i < points.length; ++i) 
            for (int j = 0; j < points.length; ++j) 
                if (points[i].compareTo(points[j]) == 0)
                    return false;
        return true;
    }
}
