import java.util.Iterator;

public class Deque<Item> implements Iterable<Item> {

    private Node first;
    private Node last;
    private int dequeSize;

    public Deque() {
        first = null;
        last = null;
        dequeSize = 0;
    }

    private class Node {
        Item item;
        Node next;
        Node prev;

        Node(Item itemVal) {
            item = itemVal;
            next = null;
            prev = null;
        }
    }

    public boolean isEmpty() {
        return (dequeSize == 0);
    }

    public int size() {
        return dequeSize;
    }

    public void addFirst(Item item) {
        if (item == null)
            throw new java.lang.NullPointerException();
        Node newNode = new Node(item);
        if (dequeSize == 0) {
            first = last = newNode;
            last.prev = first;
        } else {
            newNode.next = first;
            first.prev = newNode;
            first = newNode;
        }
        ++dequeSize;
    }

    public void addLast(Item item) {
        if (item == null)
            throw new java.lang.NullPointerException();
        Node newNode = new Node(item);
        if (dequeSize == 0) {
            first = last = newNode;
            last.prev = first;
        } else {
            last.next = newNode;
            newNode.prev = last;
            last = newNode;
        }
        ++dequeSize;
    }

    public Item removeFirst() {
        if (isEmpty())
            throw new java.util.NoSuchElementException();
        Item item = first.item;
        first = first.next;
        --dequeSize;
        return item;
    }

    public Item removeLast() {
        if (isEmpty())
            throw new java.util.NoSuchElementException();
        Item item = last.item;
        last = last.prev;
        --dequeSize;
        return item;
    }

    @Override
    public Iterator<Item> iterator() {
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item> {
        private Node current = first;

        @Override
        public boolean hasNext() {
            return current != null;
        }

        @Override
        public Item next() {
            if (!hasNext())
                throw new java.util.NoSuchElementException();
            Item item = current.item;
            current = current.next;
            return item;
        }

        @Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public static void main(String[] args) {
        Deque<Integer> deque = new Deque<Integer>();
        deque.addFirst(1);
        System.out.println("Size: " + deque.size());
        deque.addLast(2);
        System.out.println("Size: " + deque.size());
        deque.addLast(3);
        System.out.println("Size: " + deque.size());
        deque.addLast(4);
        System.out.println("Size: " + deque.size());
        deque.addFirst(5);
        System.out.println("Size: " + deque.size());
        deque.removeLast();
        System.out.println("Size: " + deque.size());
        for (Integer i : deque) {
            System.out.println(i);
        }
    }
}
