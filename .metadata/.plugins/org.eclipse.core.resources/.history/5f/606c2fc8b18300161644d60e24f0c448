import java.util.Iterator;
import edu.princeton.cs.algs4.StdRandom;

public class RandomizedQueue<Item> implements Iterable<Item> {

    private Item[] s;
    private int head = 0;
    private int tail = 0;
    private int qSize = 0;

    public RandomizedQueue() {
        s = (Item[]) new Object[1];
    }

    public boolean isEmpty() {
        return (qSize == 0);
    }

    public int size() {
        return qSize;
    }

    public void enqueue(Item item) {
        if (item == null)
            throw new java.lang.NullPointerException();
        if (tail == s.length)
            resize(2 * s.length);
        s[tail++] = item;
        ++qSize;
    }

    public Item dequeue() {
        if (isEmpty())
            throw new java.util.NoSuchElementException();
        int i = StdRandom.uniform(0, s.length);
        while (s[i] == null)
            i = StdRandom.uniform(s.length);
        Item item = s[i];
        s[i] = null;
        if (i == tail)
            --tail;
        if (i == head)
            ++head;
        --qSize;
        if (tail > 0 && tail == s.length / 4)
            resize(s.length / 2);
        return item;
    }

    public Item sample() {
        if (isEmpty())
            throw new java.util.NoSuchElementException();
        int i = StdRandom.uniform(s.length);
        while (s[i] == null)
            i = StdRandom.uniform(s.length);
        Item item = s[i];
        return item;
    }

    private void resize(int capacity) {
        @SuppressWarnings("unchecked")
        Item[] copy = (Item[]) new Object[capacity];
        for (int i = 0; i < tail; ++i)
            copy[i] = s[i];
        s = copy;
    }

    @Override
    public Iterator<Item> iterator() {
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item> {
        private int i = qSize;
        private boolean[] visited = new boolean[qSize];

        @Override
        public boolean hasNext() {
            return i > 0;
        }

        @Override
        public Item next() {
            if (!hasNext())
                throw new java.util.NoSuchElementException();
            int j = StdRandom.uniform(qSize);
            while (visited[j]) {
                j = StdRandom.uniform(qSize);
            }
            visited[j] = true;
            --i;
            return s[j];
        }

        @Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    public static void main(String[] args) {
        RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>();
        rq.enqueue(34);
        rq.size();
        rq.enqueue(42);
        rq.size();
        rq.enqueue(20);
        rq.enqueue(0);
        rq.enqueue(44);
        rq.enqueue(42);
        rq.enqueue(38);
        rq.enqueue(36);
        rq.dequeue();
        rq.enqueue(23);
    }
}
