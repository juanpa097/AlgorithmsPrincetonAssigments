import java.util.Iterator;

public class RandomizedQueue<Item> implements Iterable<Item> {
	
	private Item[] s;
	private int head = 0;
	private int tail = 0;
	private int qSize = 0;
	
	public RandomizedQueue(int capacity) {
		s = (Item[]) new Object[capacity];
	}

	public boolean isEmpty() {
		return (head == 0 || tail == 0);
	}
	
	public int size() {
		return qSize;
	}
	
	public void enqueue(Item item) {
		s[tail++] = item;
	}
	
	public Item dequeue() {
		int i = StdRandom.uniform(0, s.length);
		Item item = s[i];
		if (i == tail) --tail;
		if (i == head) ++head;
		return item;
	}
	
	public Item sample() {
		int i = StdRandom.uniform(0, s.length);
		Item item = s[i];
		return item;
	}
	
	@Override
	public Iterator<Item> iterator() {
		return new ListIterator();
	}
	
	private class ListIterator implements Iterator<Item> {
		private int i = tail;
		@Override
		public boolean hasNext() {
			return i > 0;
		}

		@Override
		public Item next() {
			return s[--i];
		}
		
		@Override
		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}
	
	public static void main (String [] args) {
		RandomizedQueue<Integer> mDeque = new RandomizedQueue<Integer>(5);
		int n = 0;
		while (true) {
			n = StdIn.readInt();
			if (n == 0) break;
			mDeque.enqueue(n);
		}
		while (!mDeque.isEmpty()) {
			System.out.println(mDeque.dequeue());
		}
	}
}
